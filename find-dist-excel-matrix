#%%
import numpy as np
import pandas as pd
import requests
import json
import random

# AN Bing Maps API key
bing_maps_api_key = "AkG58SoxLujRYGeH30ePGMT_9gz3aQ6UCiGBn3EeZ5BO6d-2OYlos9L1yH0gbopC"
travel_matrix_excel_file_path = r'Travel Matrix.xlsx'
#%%
def load_dfs(excel_file_path):
    '''Returns distance matrix Excel as a dictionary with keys as the names of individual sheets and values as dataframes of the respective keys'''
    main_excel = pd.read_excel(excel_file_path,sheet_name=None)
    return main_excel
#%%
def find_travel_time_distance(start_lat,start_long,end_lat,end_long):
	start_loc = str(start_lat) + "," + str(start_long)
	end_loc = str(end_lat) + "," + str(end_long)
	print(start_loc)
	newurl = f'http://dev.virtualearth.net/REST/v1/Routes/DistanceMatrix?origins={start_loc}&destinations={end_loc}&travelMode=driving&key={bing_maps_api_key}'
	response = requests.get(newurl)
	data = response.json()
	travel_distance = data['resourceSets'][0]['resources'][0]['results'][0]['travelDistance']
	travel_time = data['resourceSets'][0]['resources'][0]['results'][0]['travelDuration']
	return [travel_distance,travel_time]
#%%
def find_location(row):
    base_url = "http://dev.virtualearth.net/REST/v1/Locations"
    params = {
        "key": bing_maps_api_key,
        "countryRegion": row["Country Code"],
        "postalCode": row["Postal Code"],
    }
    response = requests.get(base_url, params=params)
    if response.status_code == 200:
        data = response.json()
        if data["resourceSets"][0]["estimatedTotal"] > 0:
            location = data["resourceSets"][0]["resources"][0]["point"]["coordinates"]
            latitude, longitude = location
            row["Latitude"], row["Longitude"] = latitude, longitude
            # Return latitude and longitude
            return row #pd.Series({"Latitude": latitude, "Longitude": longitude})
        else:
            return row #pd.Series({"Latitude": None, "Longitude": None})
    else:
        return row #pd.Series({"Latitude": None, "Longitude": None})
#%%
def find_coord_all_addr(excel_file_path):
    '''Use to find coordinates only when new address is added to Addresses sheet in Travel Matrix Excel. Overwrites the excel sheet in Addresses to add coordinates for each node'''
    try:
        with pd.ExcelWriter(excel_file_path, engine='openpyxl', mode='a',if_sheet_exists='replace') as writer:
            addr_df = pd.read_excel(writer,sheet_name="Addresses")
            #addr_df[["Latitude", "Longitude"]] = addr_df.apply(find_location, axis=1)
            addr_df = addr_df.apply(find_location, axis=1)
            addr_df.to_excel(writer,sheet_name="Addresses",index=False)
    except PermissionError:
        print(f"Error: Permission denied")
        exit()
    except Exception as e:
        print(f"Error: {e}")
        exit()
    return None
#%%

#%%
def create_distance_matrix(main_excel):
    '''Create one time static distance matrix Use only when new address/new node is added to Addresses sheet in Travel Matrix Excel file. Overwrites the excel sheet and adds a new sheet named distance matrix. Does not return anything.'''
    fuel_stat_loc_df, service_dir_df = main_excel["Addresses"], main_excel["Addresses"]
    for origin_node in fuel_stat_loc_df["Node"].values:
        for dest_node in fuel_stat_loc_df["Node"].values:
            pass

    return None
#%%
def distance_between_nodes(node1,node2,main_excel_df):
    '''
    REPLACES the following function: find_travel_time_distance(start_lat,start_long,end_lat,end_long)

    Used to find distance between any 2 nodes using Hwy 401 waypoints. It will determine whether travel is eastbound or westbound. It will find compatible fuel stations between origin and destination coordinates. Coordinates of any compatible fuel stations will be waypoints for Bing Maps API truck route to use highway 401 as preference when highway 401 is available (using routeAttributes).

    It will RETURN a list/tuple: (distance as FLOAT in km, time)'''
    return None
#%%
if __name__ == "__main__":
    travel_matrix_df = load_dfs(travel_matrix_excel_file_path)
    print("hello")

# %%
